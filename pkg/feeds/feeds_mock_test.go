// Code generated by MockGen. DO NOT EDIT.
// Source: feeds.go

package feeds

import (
	gomock "github.com/golang/mock/gomock"
	podcast "github.com/mxpv/podcast"
	model "github.com/mxpv/podsync/pkg/model"
	reflect "reflect"
)

// MockstorageService is a mock of storageService interface
type MockstorageService struct {
	ctrl     *gomock.Controller
	recorder *MockstorageServiceMockRecorder
}

// MockstorageServiceMockRecorder is the mock recorder for MockstorageService
type MockstorageServiceMockRecorder struct {
	mock *MockstorageService
}

// NewMockstorageService creates a new mock instance
func NewMockstorageService(ctrl *gomock.Controller) *MockstorageService {
	mock := &MockstorageService{ctrl: ctrl}
	mock.recorder = &MockstorageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockstorageService) EXPECT() *MockstorageServiceMockRecorder {
	return _m.recorder
}

// CreateFeed mocks base method
func (_m *MockstorageService) CreateFeed(feed *model.Feed) error {
	ret := _m.ctrl.Call(_m, "CreateFeed", feed)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFeed indicates an expected call of CreateFeed
func (_mr *MockstorageServiceMockRecorder) CreateFeed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CreateFeed", reflect.TypeOf((*MockstorageService)(nil).CreateFeed), arg0)
}

// GetFeed mocks base method
func (_m *MockstorageService) GetFeed(hashId string) (*model.Feed, error) {
	ret := _m.ctrl.Call(_m, "GetFeed", hashId)
	ret0, _ := ret[0].(*model.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed
func (_mr *MockstorageServiceMockRecorder) GetFeed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetFeed", reflect.TypeOf((*MockstorageService)(nil).GetFeed), arg0)
}

// Mockbuilder is a mock of builder interface
type Mockbuilder struct {
	ctrl     *gomock.Controller
	recorder *MockbuilderMockRecorder
}

// MockbuilderMockRecorder is the mock recorder for Mockbuilder
type MockbuilderMockRecorder struct {
	mock *Mockbuilder
}

// NewMockbuilder creates a new mock instance
func NewMockbuilder(ctrl *gomock.Controller) *Mockbuilder {
	mock := &Mockbuilder{ctrl: ctrl}
	mock.recorder = &MockbuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *Mockbuilder) EXPECT() *MockbuilderMockRecorder {
	return _m.recorder
}

// Build mocks base method
func (_m *Mockbuilder) Build(feed *model.Feed) (*podcast.Podcast, error) {
	ret := _m.ctrl.Call(_m, "Build", feed)
	ret0, _ := ret[0].(*podcast.Podcast)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build
func (_mr *MockbuilderMockRecorder) Build(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Build", reflect.TypeOf((*Mockbuilder)(nil).Build), arg0)
}
