// Code generated by MockGen. DO NOT EDIT.
// Source: feeds.go

// Package feeds is a generated GoMock package.
package feeds

import (
	gomock "github.com/golang/mock/gomock"
	podcast "github.com/mxpv/podcast"
	model "github.com/mxpv/podsync/pkg/model"
	reflect "reflect"
)

// Mockstats is a mock of stats interface
type Mockstats struct {
	ctrl     *gomock.Controller
	recorder *MockstatsMockRecorder
}

// MockstatsMockRecorder is the mock recorder for Mockstats
type MockstatsMockRecorder struct {
	mock *Mockstats
}

// NewMockstats creates a new mock instance
func NewMockstats(ctrl *gomock.Controller) *Mockstats {
	mock := &Mockstats{ctrl: ctrl}
	mock.recorder = &MockstatsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockstats) EXPECT() *MockstatsMockRecorder {
	return m.recorder
}

// Inc mocks base method
func (m *Mockstats) Inc(metric, hashID string) (int64, error) {
	ret := m.ctrl.Call(m, "Inc", metric, hashID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inc indicates an expected call of Inc
func (mr *MockstatsMockRecorder) Inc(metric, hashID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inc", reflect.TypeOf((*Mockstats)(nil).Inc), metric, hashID)
}

// Get mocks base method
func (m *Mockstats) Get(metric, hashID string) (int64, error) {
	ret := m.ctrl.Call(m, "Get", metric, hashID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockstatsMockRecorder) Get(metric, hashID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mockstats)(nil).Get), metric, hashID)
}

// Mockbuilder is a mock of builder interface
type Mockbuilder struct {
	ctrl     *gomock.Controller
	recorder *MockbuilderMockRecorder
}

// MockbuilderMockRecorder is the mock recorder for Mockbuilder
type MockbuilderMockRecorder struct {
	mock *Mockbuilder
}

// NewMockbuilder creates a new mock instance
func NewMockbuilder(ctrl *gomock.Controller) *Mockbuilder {
	mock := &Mockbuilder{ctrl: ctrl}
	mock.recorder = &MockbuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockbuilder) EXPECT() *MockbuilderMockRecorder {
	return m.recorder
}

// Build mocks base method
func (m *Mockbuilder) Build(feed *model.Feed) (*podcast.Podcast, error) {
	ret := m.ctrl.Call(m, "Build", feed)
	ret0, _ := ret[0].(*podcast.Podcast)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build
func (mr *MockbuilderMockRecorder) Build(feed interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*Mockbuilder)(nil).Build), feed)
}

// Mockstorage is a mock of storage interface
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// SaveFeed mocks base method
func (m *Mockstorage) SaveFeed(feed *model.Feed) error {
	ret := m.ctrl.Call(m, "SaveFeed", feed)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFeed indicates an expected call of SaveFeed
func (mr *MockstorageMockRecorder) SaveFeed(feed interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFeed", reflect.TypeOf((*Mockstorage)(nil).SaveFeed), feed)
}

// GetFeed mocks base method
func (m *Mockstorage) GetFeed(hashID string) (*model.Feed, error) {
	ret := m.ctrl.Call(m, "GetFeed", hashID)
	ret0, _ := ret[0].(*model.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed
func (mr *MockstorageMockRecorder) GetFeed(hashID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*Mockstorage)(nil).GetFeed), hashID)
}

// GetMetadata mocks base method
func (m *Mockstorage) GetMetadata(hashID string) (*model.Feed, error) {
	ret := m.ctrl.Call(m, "GetMetadata", hashID)
	ret0, _ := ret[0].(*model.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata
func (mr *MockstorageMockRecorder) GetMetadata(hashID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*Mockstorage)(nil).GetMetadata), hashID)
}

// Downgrade mocks base method
func (m *Mockstorage) Downgrade(userID string, featureLevel int) error {
	ret := m.ctrl.Call(m, "Downgrade", userID, featureLevel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Downgrade indicates an expected call of Downgrade
func (mr *MockstorageMockRecorder) Downgrade(userID, featureLevel interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Downgrade", reflect.TypeOf((*Mockstorage)(nil).Downgrade), userID, featureLevel)
}
