// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

package handler

import (
	gomock "github.com/golang/mock/gomock"
	patreon_go "github.com/mxpv/patreon-go"
	podcast "github.com/mxpv/podcast"
	api "github.com/mxpv/podsync/pkg/api"
	reflect "reflect"
)

// MockfeedService is a mock of feedService interface
type MockfeedService struct {
	ctrl     *gomock.Controller
	recorder *MockfeedServiceMockRecorder
}

// MockfeedServiceMockRecorder is the mock recorder for MockfeedService
type MockfeedServiceMockRecorder struct {
	mock *MockfeedService
}

// NewMockfeedService creates a new mock instance
func NewMockfeedService(ctrl *gomock.Controller) *MockfeedService {
	mock := &MockfeedService{ctrl: ctrl}
	mock.recorder = &MockfeedServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockfeedService) EXPECT() *MockfeedServiceMockRecorder {
	return _m.recorder
}

// CreateFeed mocks base method
func (_m *MockfeedService) CreateFeed(req *api.CreateFeedRequest, identity *api.Identity) (string, error) {
	ret := _m.ctrl.Call(_m, "CreateFeed", req, identity)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFeed indicates an expected call of CreateFeed
func (_mr *MockfeedServiceMockRecorder) CreateFeed(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CreateFeed", reflect.TypeOf((*MockfeedService)(nil).CreateFeed), arg0, arg1)
}

// GetFeed mocks base method
func (_m *MockfeedService) GetFeed(hashId string) (*podcast.Podcast, error) {
	ret := _m.ctrl.Call(_m, "GetFeed", hashId)
	ret0, _ := ret[0].(*podcast.Podcast)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed
func (_mr *MockfeedServiceMockRecorder) GetFeed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetFeed", reflect.TypeOf((*MockfeedService)(nil).GetFeed), arg0)
}

// GetMetadata mocks base method
func (_m *MockfeedService) GetMetadata(hashId string) (*api.Feed, error) {
	ret := _m.ctrl.Call(_m, "GetMetadata", hashId)
	ret0, _ := ret[0].(*api.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata
func (_mr *MockfeedServiceMockRecorder) GetMetadata(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetMetadata", reflect.TypeOf((*MockfeedService)(nil).GetMetadata), arg0)
}

// MockpatreonService is a mock of patreonService interface
type MockpatreonService struct {
	ctrl     *gomock.Controller
	recorder *MockpatreonServiceMockRecorder
}

// MockpatreonServiceMockRecorder is the mock recorder for MockpatreonService
type MockpatreonServiceMockRecorder struct {
	mock *MockpatreonService
}

// NewMockpatreonService creates a new mock instance
func NewMockpatreonService(ctrl *gomock.Controller) *MockpatreonService {
	mock := &MockpatreonService{ctrl: ctrl}
	mock.recorder = &MockpatreonServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockpatreonService) EXPECT() *MockpatreonServiceMockRecorder {
	return _m.recorder
}

// Hook mocks base method
func (_m *MockpatreonService) Hook(pledge *patreon_go.Pledge, event string) error {
	ret := _m.ctrl.Call(_m, "Hook", pledge, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Hook indicates an expected call of Hook
func (_mr *MockpatreonServiceMockRecorder) Hook(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Hook", reflect.TypeOf((*MockpatreonService)(nil).Hook), arg0, arg1)
}

// GetFeatureLevel mocks base method
func (_m *MockpatreonService) GetFeatureLevel(patronID string) int {
	ret := _m.ctrl.Call(_m, "GetFeatureLevel", patronID)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetFeatureLevel indicates an expected call of GetFeatureLevel
func (_mr *MockpatreonServiceMockRecorder) GetFeatureLevel(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetFeatureLevel", reflect.TypeOf((*MockpatreonService)(nil).GetFeatureLevel), arg0)
}
