// Code generated by MockGen. DO NOT EDIT.
// Source: patreon.go

// Package support is a generated GoMock package.
package support

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/mxpv/podsync/pkg/model"
	reflect "reflect"
)

// Mockstorage is a mock of storage interface
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// AddPledge mocks base method
func (m *Mockstorage) AddPledge(pledge *model.Pledge) error {
	ret := m.ctrl.Call(m, "AddPledge", pledge)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPledge indicates an expected call of AddPledge
func (mr *MockstorageMockRecorder) AddPledge(pledge interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPledge", reflect.TypeOf((*Mockstorage)(nil).AddPledge), pledge)
}

// UpdatePledge mocks base method
func (m *Mockstorage) UpdatePledge(patronID string, pledge *model.Pledge) error {
	ret := m.ctrl.Call(m, "UpdatePledge", patronID, pledge)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePledge indicates an expected call of UpdatePledge
func (mr *MockstorageMockRecorder) UpdatePledge(patronID, pledge interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePledge", reflect.TypeOf((*Mockstorage)(nil).UpdatePledge), patronID, pledge)
}

// DeletePledge mocks base method
func (m *Mockstorage) DeletePledge(pledge *model.Pledge) error {
	ret := m.ctrl.Call(m, "DeletePledge", pledge)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePledge indicates an expected call of DeletePledge
func (mr *MockstorageMockRecorder) DeletePledge(pledge interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePledge", reflect.TypeOf((*Mockstorage)(nil).DeletePledge), pledge)
}

// GetPledge mocks base method
func (m *Mockstorage) GetPledge(patronID string) (*model.Pledge, error) {
	ret := m.ctrl.Call(m, "GetPledge", patronID)
	ret0, _ := ret[0].(*model.Pledge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPledge indicates an expected call of GetPledge
func (mr *MockstorageMockRecorder) GetPledge(patronID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPledge", reflect.TypeOf((*Mockstorage)(nil).GetPledge), patronID)
}
