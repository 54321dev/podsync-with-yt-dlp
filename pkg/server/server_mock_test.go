// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

package server

import (
	gomock "github.com/golang/mock/gomock"
	podcast "github.com/mxpv/podcast"
	api "github.com/mxpv/podsync/pkg/api"
	reflect "reflect"
)

// Mockfeed is a mock of feed interface
type Mockfeed struct {
	ctrl     *gomock.Controller
	recorder *MockfeedMockRecorder
}

// MockfeedMockRecorder is the mock recorder for Mockfeed
type MockfeedMockRecorder struct {
	mock *Mockfeed
}

// NewMockfeed creates a new mock instance
func NewMockfeed(ctrl *gomock.Controller) *Mockfeed {
	mock := &Mockfeed{ctrl: ctrl}
	mock.recorder = &MockfeedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *Mockfeed) EXPECT() *MockfeedMockRecorder {
	return _m.recorder
}

// CreateFeed mocks base method
func (_m *Mockfeed) CreateFeed(req *api.CreateFeedRequest, identity *api.Identity) (string, error) {
	ret := _m.ctrl.Call(_m, "CreateFeed", req, identity)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFeed indicates an expected call of CreateFeed
func (_mr *MockfeedMockRecorder) CreateFeed(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CreateFeed", reflect.TypeOf((*Mockfeed)(nil).CreateFeed), arg0, arg1)
}

// GetFeed mocks base method
func (_m *Mockfeed) GetFeed(hashId string) (*podcast.Podcast, error) {
	ret := _m.ctrl.Call(_m, "GetFeed", hashId)
	ret0, _ := ret[0].(*podcast.Podcast)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed
func (_mr *MockfeedMockRecorder) GetFeed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetFeed", reflect.TypeOf((*Mockfeed)(nil).GetFeed), arg0)
}

// GetMetadata mocks base method
func (_m *Mockfeed) GetMetadata(hashId string) (*api.Feed, error) {
	ret := _m.ctrl.Call(_m, "GetMetadata", hashId)
	ret0, _ := ret[0].(*api.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata
func (_mr *MockfeedMockRecorder) GetMetadata(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetMetadata", reflect.TypeOf((*Mockfeed)(nil).GetMetadata), arg0)
}
